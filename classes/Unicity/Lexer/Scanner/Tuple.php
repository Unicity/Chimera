<?php

/**
 * Copyright 2015-2016 Unicity International
 * Copyright 2011-2013 Spadefoot Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare(strict_types=1);

namespace Unicity\Lexer\Scanner;

use Unicity\Common;
use Unicity\Core;
use Unicity\Lexer;
use Unicity\Throwable;

/**
 * This class represents a tuple generated by a tokenizer.
 *
 * @access public
 * @class
 * @package Lexer
 */
class Tuple extends Core\AbstractObject
{
    /**
     * This variable stores the start index of the token.
     *
     * @access protected
     * @var integer
     */
    protected $index;

    /**
     * This variable stores the actual token.
     *
     * @access protected
     * @var \Unicity\Common\StringRef
     */
    protected $token;

    /**
     * This variable stores the type associated with the token.
     *
     * @access protected
     * @var \Unicity\Lexer\Scanner\ITokenType
     */
    protected $type;

    /**
     * This constructor initializes the class.
     *
     * @access public
     * @param \Unicity\Lexer\Scanner\ITokenType $type the type of token
     * @param \Unicity\Common\StringRef $token the actual token
     * @param int $index the start index of the token
     */
    public function __construct(Lexer\Scanner\ITokenType $type, Common\StringRef $token, int $index)
    {
        $this->token = $token;
        $this->type = $type;
        $this->index = $index;
    }

    /**
     * This destructor ensures that any resources are properly disposed.
     *
     * @access public
     */
    public function __destruct()
    {
        parent::__destruct();
        unset($this->index);
        unset($this->token);
        unset($this->type);
    }

    /**
     * This method returns the value associated with the specified property.
     *
     * @access public
     * @param string $name the name of the property
     * @return mixed the value of the property
     * @throws \Unicity\Throwable\InvalidProperty\Exception indicates that the specified property is
     *                                                      either inaccessible or undefined
     */
    public function __get($name)
    {
        if (!property_exists($this, $name)) {
            throw new Throwable\InvalidProperty\Exception('Unable to get the specified property. Property :name is either inaccessible or undefined.', [':name' => $name]);
        }

        return $this->$name;
    }

}
